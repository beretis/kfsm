@startuml

skinparam monochrome true

class Context {
}
enum States {
}
enum Events {
}

class StateMachineBuilder<States, Events, Context> {
    transition(startState: S, event: E[, targetState: S][, guard: C.() -> Boolean], action: C.(Any[]) -> Unit)
    automatic(startState: S, targetState: S[, guard: C.() -> Boolean], action: C.(Any[]) -> Unit)
    automaticPop(startState: S[, targetState: S][, targetMap: String][, guard: C.() -> Boolean], action: C.(Any[]) -> Unit)
    automaticPush(startState: S, targetState: S, targetMap: String[, guard: C.() -> Boolean], action: C.(Any[]) -> Unit)
    create(context: Context, initialState: States?) : StateMachineInstance<States,Events,Context>
}

class StateMachineDefinition<S, E, C> {
    allowed(currentState: S, includeDefaults: Boolean): Set<E>
    eventAllowed(event: E, currentState: S, includeDefault: Boolean): Boolean
    create(context: C, initialState: S?) : StateMachineInstance<S,E,C>
}

class StateMachineInstance<States, Events, Context> {
    StateMachineInstance(context: Context, fsm: StateMachine<States,Events,Context>, initialState: S?)
    Context: context
    var currentState: S
    sendEvent(event: Events, Any[])
}

StateMachineBuilder ..left..> States : <<states>>
StateMachineBuilder ..right..> Events : <<events>>
StateMachineBuilder ..up.> Context : <<context>>

StateMachineDefinition .left.> S : <<states>>
StateMachineDefinition .right.> E : <<events>>
StateMachineDefinition .up.> C : <<context>>

StateMachineInstance *---> StateMachineDefinition : definition
StateMachineInstance *--left--> Context : context

@enduml
