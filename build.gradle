buildscript {
    repositories {
        mavenLocal()
        maven { url = 'https://maven.pkg.jetbrains.space/kotlin/p/kotlin/temporary' }
        gradlePluginPortal()
        mavenCentral()
    }
    dependencies {
        classpath group: 'org.jetbrains.kotlinx', name: 'kotlinx-html-jvm', version: '0.7.3'
    }
}

plugins {
    id 'org.jetbrains.kotlin.multiplatform' version '1.6.21'
    id 'org.jetbrains.dokka' version '1.6.21'
    id 'maven-publish'
    id 'signing'
    id 'org.asciidoctor.jvm.convert' version '2.4.0'
    id 'org.jlleitschuh.gradle.ktlint' version '10.1.0'
    id 'org.jlleitschuh.gradle.ktlint-idea' version '10.1.0'
    id 'com.cosminpolifronie.gradle.plantuml' version '1.6.0'
    id 'io.jumpco.open.kfsm.viz-plugin' version '1.5.2.4'
    id 'org.jetbrains.qodana' version '0.1.12'
}

repositories {
    mavenLocal()
    maven { url = 'https://maven.pkg.jetbrains.space/kotlin/p/kotlin/temporary' }
    mavenCentral()
}
group = 'io.jumpco.open'
version = '1.6.1-SNAPSHOT'
description = 'Kotlin Finite-state machine'

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

apply from: "$rootProject.projectDir/gradle/platform.gradle"
apply from: "$rootProject.projectDir/gradle/docs.gradle"
apply from: "$rootProject.projectDir/gradle/publish.gradle"

def useTarget = project.ext.useTarget


kotlin {
    js() {}
    sourceSets {
        all {
            languageSettings.optIn("kotlin.RequiresOptIn")
        }
        commonMain {
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-stdlib-common'
                api 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.1'
            }
        }
        commonTest {
            dependencies {
                implementation 'io.mockk:mockk-common:1.12.3'
            }
        }
        if (useTarget['js']) {
            jsMain {
                dependencies {
                    implementation 'org.jetbrains.kotlin:kotlin-stdlib-js'
                    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core-js:1.6.1'

                }
            }
        }
        if (useTarget['jvm']) {
            jvmMain {
                dependencies {
                    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
                    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:1.6.1'
                }
            }
            jvmTest {
                dependencies {
                    implementation 'org.jetbrains.kotlin:kotlin-test:1.6.21'
                    implementation 'junit:junit:4.13.2'
                    implementation 'io.mockk:mockk:1.12.3'
                    implementation 'io.jumpco.open:kfsm-viz:1.5.2.4'
                }
            }
        }
    }
}

def rootDir = rootProject.projectDir.path
dokkaHtml {
    dokkaSourceSets {
        configureEach {
            samples.from(
                "$rootDir/src/commonTest/kotlin/io/jumpco/open/kfsm/example/TurnstileTypes.kt",
                "$rootDir/src/commonTest/kotlin/io/jumpco/open/kfsm/example/ImmutableLockFSM.kt",
                "$rootDir/src/commonTest/kotlin/io/jumpco/open/kfsm/example/LockTypes.kt",
                "$rootDir/src/commonTest/kotlin/io/jumpco/open/kfsm/example/PayingTurnstileTypes.kt",
                "$rootDir/src/commonTest/kotlin/io/jumpco/open/kfsm/example/SecureTurnstile.kt"
            )
        }
    }
    inputs.dir('src/commonTest/kotlin')
}

ktlint {
    debug = true
    verbose = true
    ignoreFailures = true
    reporters {
        reporter "plain"
        reporter "checkstyle"
    }
    // ignoreFailures = true
    filter {
        exclude("**/generated/**")
        include("**/kotlin/**")
    }
}

task copyPng(type: Copy) {
    from(projectDir) {
        include '*.png'
    }
    into "$buildDir/docs/asciidoc"
}

asciidoctor.dependsOn(copyPng)

plantUml {
    render input: 'src/docs/plantuml/*.plantuml', output: 'src/docs/asciidoc', format: 'png', withMetadata: false
}

project.afterEvaluate {
    def envVar = System.getenv('GRAPHVIZ_DOT')
    if (envVar) {
        def dot = file(envVar)
        if (!dot.exists()) {
            throw new RuntimeException("Could not find $dot")
        }
    } else {
        logger.warn("GRAPHVIZ_DOT env var not found")
    }
}

assemble.dependsOn('generateFsmViz')
docs.dependsOn('generateFsmViz')

kfsmViz {
    fsm('TurnstileFSM') {
        outputFolder = file('generated')
        input = file('src/commonTest/kotlin/io/jumpco/open/kfsm/example/TurnstileTypes.kt')
        isGeneratePlantUml = true
        isGenerateAsciidoc = true
        output = 'turnstile-detail'
    }
    fsm('PayingTurnstileFSM') {
        outputFolder = file('generated')
        input = file('src/commonTest/kotlin/io/jumpco/open/kfsm/example/PayingTurnstileTypes.kt')
        isGeneratePlantUml = true
        isGenerateAsciidoc = true
        output = 'paying-turnstile-detail'
    }

    fsm('SecureTurnstileFSM') {
        outputFolder = file('generated')
        input = file('src/commonTest/kotlin/io/jumpco/open/kfsm/example/SecureTurnstile.kt')
        isGeneratePlantUml = true
        isGenerateAsciidoc = true
        output = 'secure-turnstile-detail'
    }

    fsm('TimerSecureTurnstileFSM') {
        outputFolder = file('generated')
        input = file('src/commonTest/kotlin/io/jumpco/open/kfsm/example/TimeoutSecureTurnstile.kt')
        isGeneratePlantUml = true
        isGenerateAsciidoc = true
        output = 'timeout-turnstile-detail'
    }
    fsm('PacketReaderFSM') {
        outputFolder = file('generated')
        input = file('src/jvmTest/kotlin/io/jumpco/open/kfsm/example/PacketReaderTests.kt')
        isGeneratePlantUml = true
        isGenerateAsciidoc = true
        output = 'packet-reader-detail'
    }
}

dokkaJavadoc.onlyIf { false }
dokkaJekyll.onlyIf { false }
dokkaGfm.onlyIf { false }

