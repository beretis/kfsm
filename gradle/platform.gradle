/*
 * Copyright (c) 2020-2021. Open JumpCO
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and limitations under the License.
 */

apply plugin: 'org.jetbrains.kotlin.multiplatform'

def targetList = ['mingw', 'linux', 'macos', 'js', 'jvm', 'wasm']
project.ext.useTarget = [:]
def useTarget = project.ext.useTarget

targetList.forEach { target ->
    useTarget[target] = defaultProfile.contains(target)
}

def profile = ext.find('profile') ?: defaultProfile ?: ''
if (profile.contains('default')) {
    if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
        useTarget['mingw'] = true
        logger.lifecycle "Detected ${org.gradle.internal.os.OperatingSystem.current()} using mingw"
    }
    if (org.gradle.internal.os.OperatingSystem.current().isLinux()) {
        useTarget['linux'] = true
        logger.lifecycle "Detected ${org.gradle.internal.os.OperatingSystem.current()} using linux"
    }
    if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
        useTarget['macos'] = true
        logger.lifecycle "Detected ${org.gradle.internal.os.OperatingSystem.current()} using macos"
    }
}
if (profile.contains('linux')) {
    useTarget['linux'] = true
}
if (profile.contains('mingw')) {
    useTarget['mingw'] = true
}
if (profile.contains('macos')) {
    useTarget['macos'] = true
}
if (profile.contains('wasm')) {
    useTarget['wasm'] = true
}

def configureNative(srcSetMain, srcSetTest) {
    srcSetMain.kotlin.srcDirs = ['src/nativeMain/kotlin']
    srcSetTest.kotlin.srcDirs = ['src/nativeTest/kotlin']
}

kotlin {

    if (useTarget['jvm']) {
        jvm() {
            mavenPublication {
                artifactId = "${project.name}-jvm"
            }
        }
    }
    if (useTarget['js']) {
        if (project.ext.has('nodeInstall')) {
            // tasks.findByPath(':compileKotlinsJs')?.dependsOn('kotlinNodeJsSetup')
            tasks.findByPath(':kotlinNodeJsSetup')?.onlyIf { true }
        }
        js('js') {
            nodejs()
            browser()
            compilations.main {
                kotlinOptions {
                    metaInfo = true
                    sourceMap = true
                    verbose = true
                    moduleKind = "umd"
                }
            }
        }
    }
    if (useTarget['mingw']) {
        mingwX64('mingw') {
            mavenPublication {
                artifactId = "${project.name}-mingwX64"
            }
        }
    }
    if (useTarget['linux']) {
        linuxX64('linux') {
            mavenPublication {
                artifactId = "${project.name}-linuxX64"
            }
        }
    }
    if (useTarget['macos']) {
        macosX64('macos') {
            mavenPublication {
                artifactId = "${project.name}-macosX64"
            }
        }
    }
    if (useTarget['wasm']) {
        wasm32("wasm") {
            mavenPublication {
                artifactId = "${project.name}-wasm32"
            }
        }
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }
        if (useTarget['jvm']) {
            jvmMain {
                dependencies {
                    implementation kotlin('stdlib-jdk8')
                }
            }
            jvmTest {
                dependencies {
                    implementation kotlin('test')
                    implementation kotlin('test-junit')
                }
            }
        }
        if (useTarget['js']) {
            jsMain {
                dependencies {
                    implementation kotlin('stdlib-js')
                }
            }
            jsTest {
                dependencies {
                    implementation kotlin('test-js')
                }
                kotlin.srcDirs = ['src/jsTest/kotlin']
            }
        }
        if (useTarget['mingw']) {
            configureNative(mingwMain, mingwTest)
        }
        if (useTarget['linux']) {
            configureNative(linuxMain, linuxTest)
        }
        if (useTarget['macos']) {
            configureNative(macosMain, macosTest)
        }
        if (useTarget['wasm']) {
            configureNative(wasmMain, wasmTest)
        }
    }
}

