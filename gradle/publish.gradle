/*
 * Copyright (c) 2020-2021. Open JumpCO
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and limitations under the License.
 */

apply plugin: 'signing'

def useTarget = project.ext.useTarget

task javadocJar(type: Jar) {
    archivesBaseName = 'kfsm'
    archiveClassifier = 'javadoc'
    from dokkaHtml.outputDirectory
}


gradle.afterProject {
    tasks.forEach { task ->
        if (task.name.contains('dokka')) {
            javadocJar.dependsOn(task)
        }
        if (task.name.contains('Publication')) {
            publish.dependsOn(task)
        }
    }
}


artifacts {
    archives javadocJar
}

def pomConfig = {
    licenses {
        license {
            name 'GNU General Public License v3'
            url 'https://www.gnu.org/licenses/gpl-3.0.en.html'
            distribution 'repo'
        }
    }
    developers {
        developer {
            id 'corneil_jumpco'
            name 'Corneil @ JumpCO'
            organization 'Open JumpCO'
            organizationUrl 'https://open.jumpco.io'
        }
    }

    scm {
        url project.vcs
    }
}

def configureMavenCentralMetadata = { pom ->
    def root = asNode()
    root.appendNode('name', project.name)
    root.appendNode('description', project.description)
    root.appendNode('url', project.vcs)
    root.children().last() + pomConfig
}

publishing {
    repositories {
        maven {
            logger.lifecycle("maven:publish:version=$version")
            def snapshotsRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots'
            def releasesRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
            url = project.version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username rootProject.ext.find('ossJiraUser') ?: System.getenv('OSS_JIRA_USER')
                password rootProject.ext.find('ossJiraPwd') ?: System.getenv('OSS_JIRA_PWD')
            }
        }
    }
    def platforms = ['js', 'jvm', 'linux', 'mingw', 'macos', 'wasm']
    publications.all { publication ->
        pom.withXml(configureMavenCentralMetadata)
        logger.info "publication:$publication.name"
        if (platforms.contains(publication.name)) {
            publication.artifact javadocJar
        }
    }
}


signing {
    sign publishing.publications.kotlinMultiplatform
    // sign publishing.publications.metadata
    sign publishing.publications.documentation

    if (useTarget['jvm']) {
        sign publishing.publications.jvm
    }
    if (useTarget['js']) {
        sign publishing.publications.js
    }
    if (useTarget['macos']) {
        sign publishing.publications.macos
    }
    if (useTarget['linux']) {
        sign publishing.publications.linux
    }
    if (useTarget['mingw']) {
        sign publishing.publications.mingw
    }
    if (useTarget['wasm']) {
        sign publishing.publications.wasm
    }
}
